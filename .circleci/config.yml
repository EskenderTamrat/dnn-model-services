commands:
  bnd_cmd:
    description: "Build and deploy SingularityNET Services"
    parameters:
      docker_image_name:
        type: string
        default: ""
      docker_container_name:
        type: string
        default: ""
    steps:
      - run:
          name: Build docker image
          command: |
            echo "==================================================== Configs ==================================================="
            export DOCKER_IMAGE_NAME=<< parameters.docker_image_name >>
            export DOCKER_CONTAINER_NAME=<< parameters.docker_container_name >>
            SNETD_PORT=$([ "$CIRCLE_USERNAME" = "singnet" ] && echo "$SNETD_PORT_PRODUCTION" || echo "$SNETD_PORT_TESTING")
            PROD_TAG=$([ "$CIRCLE_USERNAME" = "singnet" ] && echo "PROD_" || echo "")
            echo            git_user  : $CIRCLE_USERNAME
            echo            git_repo  : $CIRCLE_PROJECT_REPONAME
            echo            git_branch: $CIRCLE_BRANCH
            echo DOCKER_IMAGE_NAME    : $DOCKER_IMAGE_NAME
            echo DOCKER_CONTAINER_NAME: $DOCKER_CONTAINER_NAME
            echo DOCKER_SNETD_PORT    : $SNETD_PORT
            echo "================================================================================================================"

            ssh -o "StrictHostKeyChecking no" $SSH_USER@$SSH_HOST \<< EOF
              nvidia-docker stop ${PROD_TAG}${DOCKER_CONTAINER_NAME} || true && nvidia-docker rename ${PROD_TAG}${DOCKER_CONTAINER_NAME} ${PROD_TAG}${DOCKER_CONTAINER_NAME}_old || true
              nvidia-docker build \
                --build-arg git_owner=$CIRCLE_USERNAME \
                --build-arg git_repo=$CIRCLE_PROJECT_REPONAME \
                --build-arg git_branch=$CIRCLE_BRANCH \
                -t $DOCKER_IMAGE_NAME:${CIRCLE_USERNAME} https://github.com/$CIRCLE_USERNAME/$CIRCLE_PROJECT_REPONAME.git#$CIRCLE_BRANCH:/Services/gRPC/$SERVICE_NAME
              nvidia-docker run --runtime=nvidia \
                --name ${PROD_TAG}${DOCKER_CONTAINER_NAME} \
                --restart unless-stopped \
                -p $SNETD_PORT:$SNETD_PORT \
                -di ${DOCKER_IMAGE_NAME}:${CIRCLE_USERNAME} $SERVICE_RUN_COMMAND
            EOF
      - run:
          name: Remove Old Docker Container
          command: |
            export DOCKER_IMAGE_NAME=<< parameters.docker_image_name >>
            export DOCKER_CONTAINER_NAME=<< parameters.docker_container_name >>
            PROD_TAG=$([ "$CIRCLE_USERNAME" = "singnet" ] && echo "PROD_" || echo "")

            ssh -o "StrictHostKeyChecking no" $SSH_USER@$SSH_HOST \<< EOF
            nvidia-docker stop ${PROD_TAG}${DOCKER_CONTAINER_NAME}_old || true && nvidia-docker rm ${PROD_TAG}${DOCKER_CONTAINER_NAME}_old || true
            EOF
      - run:
          name: Test local
          command: |
            export DOCKER_IMAGE_NAME=<< parameters.docker_image_name >>
            export DOCKER_CONTAINER_NAME=<< parameters.docker_container_name >>
            PROD_TAG=$([ "$CIRCLE_USERNAME" = "singnet" ] && echo "PROD_" || echo "")

            ssh -o "StrictHostKeyChecking no" $SSH_USER@$SSH_HOST \<< EOF
              nvidia-docker exec -i ${PROD_TAG}${DOCKER_CONTAINER_NAME} $SERVICE_TEST_COMMAND
            EOF

version: 2.1
jobs:
  deploy-cntk-image-recon:
    docker:
    - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: cntk-image-recon
      SERVICE_RUN_COMMAND: bash -c "source '/cntk/activate-cntk';git pull;python3 run_image_recon_service.py"
      SERVICE_TEST_COMMAND: bash -c "source '/cntk/activate-cntk';python3 test_image_recon_service.py auto"
      SNETD_PORT_PRODUCTION: 7004
      SNETD_PORT_TESTING: 7064
    steps:
      - bnd_cmd:
          docker_image_name: cntk_image_recognition
          docker_container_name: ARTUR_CNTK_IMAGE_RECON

  deploy-i3d-video-action-recognition:
    docker:
      - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: i3d-video-action-recognition
      SERVICE_RUN_COMMAND: bash -c "git pull;python3 run_video_action_recon_service.py"
      SERVICE_TEST_COMMAND: python3 test_video_action_recon_service.py auto
      SNETD_PORT_PRODUCTION: 7005
      SNETD_PORT_TESTING: 7065
    steps:
      - bnd_cmd:
          docker_image_name: i3d_video_action_recognition
          docker_container_name: ARTUR_I3D_VIDEO_ACTION_RECON

  deploy-places365-scene-recognition:
    docker:
      - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: places365-scene-recognition
      SERVICE_RUN_COMMAND: bash -c "git pull;python3 run_scene_recognition_service.py"
      SERVICE_TEST_COMMAND: python3 test_scene_recognition_service.py auto
      SNETD_PORT_PRODUCTION: 7019
      SNETD_PORT_TESTING: 7069
    steps:
      - bnd_cmd:
          docker_image_name: places365_scene_recognition
          docker_container_name: RAMON_PLACES365_SCENE_RECON

  deploy-s2vt-video-captioning:
    docker:
      - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: s2vt-video-captioning
      SERVICE_RUN_COMMAND: bash -c "git pull;python run_video_cap_service.py"
      SERVICE_TEST_COMMAND: python test_video_cap_service.py auto
      SNETD_PORT_PRODUCTION: 7007
      SNETD_PORT_TESTING: 7067
    steps:
      - bnd_cmd:
          docker_image_name: s2vt_video_captioning
          docker_container_name: ARTUR_S2VT_VIDEO_CAPTIONING

  deploy-yolov3-object-detection:
    docker:
      - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: yolov3-object-detection
      SERVICE_RUN_COMMAND: bash -c "git pull;python3 run_object_detection_service.py"
      SERVICE_TEST_COMMAND: python3 test_object_detection_service.py auto
      SNETD_PORT_PRODUCTION: 7008
      SNETD_PORT_TESTING: 7068
    steps:
      - bnd_cmd:
          docker_image_name: yolov3_object_detection
          docker_container_name: ARTUR_YOLOv3_OBJECT_DETECTION

workflows:
  version: 2.1
  build-and-deploy:
    jobs:
      - deploy-cntk-image-recon
      - deploy-i3d-video-action-recognition
      #- deploy-object-detection-image-recon
      #- deploy-places365-scene-recognition
      - deploy-s2vt-video-captioning
      - deploy-yolov3-object-detection
