commands:
  bnd_cmd:
    description: "Build and deploy SingularityNET Services"
    parameters:
      docker_image_name:
        type: string
        default: ""
      docker_container_name:
        type: string
        default: ""
      docker_etcd_host_folder:
        type: string
        default: ""
      docker_etcd_container_folder:
        type: string
        default: ""
      docker_mount_volumes:
        type: boolean
        default: false
      docker_mount_src:
        type: string
        default: ""
      docker_mount_dest:
        type: string
        default: ""
    steps:
      - run:
          name: Build docker image
          command: |
            echo "==================================================== Configs ==================================================="
            export DOCKER_IMAGE_NAME=<< parameters.docker_image_name >>
            export DOCKER_CONTAINER_NAME=<< parameters.docker_container_name >>
            export DOCKER_MOUNT_VOLUMES=<< parameters.docker_mount_volumes >>
            export DOCKER_MOUNT_SRC=<< parameters.docker_mount_src >>
            export DOCKER_MOUNT_DEST=<< parameters.docker_mount_dest >>
            export ETCD_HOST_FOLDER=<< parameters.docker_etcd_host_folder >>
            export ETCD_CONTAINER_FOLDER=<< parameters.docker_etcd_container_folder >>
            PROD_TAG=$([ "${CIRCLE_PROJECT_USERNAME}" = "singnet" ] && echo "PROD_" || echo "")
            echo            git_user  : ${CIRCLE_PROJECT_USERNAME}
            echo            git_repo  : ${CIRCLE_PROJECT_REPONAME}
            echo            git_branch: ${CIRCLE_BRANCH}
            echo SSH_USER             : ${SSH_USER}
            echo SSH_HOST             : ${SSH_HOST}
            echo DOCKER_IMAGE_NAME    : ${DOCKER_IMAGE_NAME}
            echo DOCKER_CONTAINER_NAME: ${DOCKER_CONTAINER_NAME}
            echo DOCKER_MOUNT_VOLUMES : ${DOCKER_MOUNT_VOLUMES}
            echo DOCKER_MOUNT_SRC     : ${DOCKER_MOUNT_SRC}
            echo DOCKER_MOUNT_DEST    : ${DOCKER_MOUNT_DEST}
            echo ETCD_HOST_FOLDER     : ${ETCD_HOST_FOLDER}
            echo ETCD_CONTAINER_FOLDER: ${ETCD_CONTAINER_FOLDER}
            echo "================================================================================================================"

            ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} \<< EOF
              nvidia-docker stop ${PROD_TAG}${DOCKER_CONTAINER_NAME} || true && nvidia-docker rename ${PROD_TAG}${DOCKER_CONTAINER_NAME} ${PROD_TAG}${DOCKER_CONTAINER_NAME}_old || true
              nvidia-docker build \
                --build-arg git_owner=${CIRCLE_PROJECT_USERNAME} \
                --build-arg git_repo=${CIRCLE_PROJECT_REPONAME} \
                --build-arg git_branch=${CIRCLE_BRANCH} \
                -t ${DOCKER_IMAGE_NAME}:${CIRCLE_PROJECT_USERNAME} https://raw.githubusercontent.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}/${SERVICE_FOLDER}/Dockerfile
              nvidia-docker run --runtime=nvidia \
                --name ${PROD_TAG}${DOCKER_CONTAINER_NAME} \
                --restart unless-stopped \
                $([ "${CIRCLE_PROJECT_USERNAME}" = "singnet" ] && echo "-p ${SNETD_PORT_KOVAN}:${SNETD_PORT_KOVAN}" || echo "") \
                $([ "${CIRCLE_PROJECT_USERNAME}" = "singnet" ] && echo "-p ${SNETD_PORT_ROPSTEN}:${SNETD_PORT_ROPSTEN}" || echo "") \
                $([ "${CIRCLE_PROJECT_USERNAME}" = "singnet" ] && echo "-v ~/${ETCD_HOST_FOLDER}:/${ETCD_CONTAINER_FOLDER}" || echo "") \
                $([ "${DOCKER_MOUNT_VOLUMES}" = "true" ] && echo "-v ${DOCKER_MOUNT_SRC}:${DOCKER_MOUNT_DEST}" || echo "") \
                -di ${DOCKER_IMAGE_NAME}:${CIRCLE_PROJECT_USERNAME} ${SERVICE_RUN_COMMAND}
            EOF
      - run:
          name: Remove Old Docker Container
          command: |
            export DOCKER_IMAGE_NAME=<< parameters.docker_image_name >>
            export DOCKER_CONTAINER_NAME=<< parameters.docker_container_name >>
            PROD_TAG=$([ "${CIRCLE_PROJECT_USERNAME}" = "singnet" ] && echo "PROD_" || echo "")

            ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} \<< EOF
            nvidia-docker stop ${PROD_TAG}${DOCKER_CONTAINER_NAME}_old || true && nvidia-docker rm ${PROD_TAG}${DOCKER_CONTAINER_NAME}_old || true
            EOF
      - run:
          name: Test local
          command: |
            export DOCKER_IMAGE_NAME=<< parameters.docker_image_name >>
            export DOCKER_CONTAINER_NAME=<< parameters.docker_container_name >>
            PROD_TAG=$([ "${CIRCLE_PROJECT_USERNAME}" = "singnet" ] && echo "PROD_" || echo "")

            ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} \<< EOF
              nvidia-docker exec -i ${PROD_TAG}${DOCKER_CONTAINER_NAME} ${SERVICE_TEST_COMMAND}
            EOF

version: 2.1
jobs:
  deploy-cntk-image-recon:
    docker:
    - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: cntk-image-recon
      SERVICE_FOLDER: Services/gRPC/cntk-image-recon
      SERVICE_RUN_COMMAND: bash -c "source '/cntk/activate-cntk';git pull;python3 run_image_recon_service.py"
      SERVICE_TEST_COMMAND: bash -c "source '/cntk/activate-cntk';python3 test_image_recon_service.py auto"
      SNETD_PORT_KOVAN: 7004
      SNETD_PORT_ROPSTEN: 7054
    steps:
      - bnd_cmd:
          docker_image_name: cntk_image_recognition
          docker_container_name: ARTUR_CNTK_IMAGE_RECON
          docker_etcd_host_folder: singnet/etcd/${SERVICE_NAME}/
          docker_etcd_container_folder: opt/singnet/${CIRCLE_PROJECT_REPONAME}/${SERVICE_FOLDER}/etcd/

  deploy-i3d-video-action-recognition:
    docker:
      - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: i3d-video-action-recognition
      SERVICE_FOLDER: Services/gRPC/i3d-video-action-recognition
      SERVICE_RUN_COMMAND: bash -c "git pull;python3 run_video_action_recon_service.py"
      SERVICE_TEST_COMMAND: python3 test_video_action_recon_service.py auto
      SNETD_PORT_KOVAN: 7005
      SNETD_PORT_ROPSTEN: 7055
    steps:
      - bnd_cmd:
          docker_image_name: i3d_video_action_recognition
          docker_container_name: ARTUR_I3D_VIDEO_ACTION_RECON
          docker_etcd_host_folder: singnet/etcd/${SERVICE_NAME}/
          docker_etcd_container_folder: opt/singnet/${CIRCLE_PROJECT_REPONAME}/${SERVICE_FOLDER}/etcd/

  deploy-s2vt-video-captioning:
    docker:
      - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: s2vt-video-captioning
      SERVICE_FOLDER: Services/gRPC/s2vt-video-captioning
      SERVICE_RUN_COMMAND: bash -c "git pull;python run_video_cap_service.py"
      SERVICE_TEST_COMMAND: python test_video_cap_service.py auto
      SNETD_PORT_KOVAN: 7006
      SNETD_PORT_ROPSTEN: 7056
    steps:
      - bnd_cmd:
          docker_image_name: s2vt_video_captioning
          docker_container_name: ARTUR_S2VT_VIDEO_CAPTIONING
          docker_etcd_host_folder: singnet/etcd/${SERVICE_NAME}/
          docker_etcd_container_folder: opt/singnet/${CIRCLE_PROJECT_REPONAME}/${SERVICE_FOLDER}/etcd/

  deploy-yolov3-object-detection:
    docker:
      - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: yolov3-object-detection
      SERVICE_FOLDER: Services/gRPC/yolov3-object-detection
      SERVICE_RUN_COMMAND: bash -c "git pull;python3 run_object_detection_service.py"
      SERVICE_TEST_COMMAND: python3 test_object_detection_service.py auto
      SNETD_PORT_KOVAN: 7007
      SNETD_PORT_ROPSTEN: 7057
    steps:
      - bnd_cmd:
          docker_image_name: yolov3_object_detection
          docker_container_name: ARTUR_YOLOv3_OBJECT_DETECTION
          docker_etcd_host_folder: singnet/etcd/${SERVICE_NAME}/
          docker_etcd_container_folder: opt/singnet/${CIRCLE_PROJECT_REPONAME}/${SERVICE_FOLDER}/etcd/

  deploy-zeta36-chess-alpha-zero:
    docker:
      - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: zeta36-chess-alpha-zero
      SERVICE_FOLDER: Services/gRPC/zeta36-chess-alpha-zero
      SERVICE_RUN_COMMAND: bash -c "git pull;python3.6 run_alpha_zero_service.py"
      SERVICE_TEST_COMMAND: bash -c "sleep 20;python3.6 test_alpha_zero_service.py auto"
      SNETD_PORT_KOVAN: 7008
      SNETD_PORT_ROPSTEN: 7058
    steps:
      - bnd_cmd:
          docker_image_name: zeta36_chess_alpha_zero
          docker_container_name: ARTUR_CHESS_ALPHA_ZERO
          docker_etcd_host_folder: singnet/etcd/${SERVICE_NAME}/
          docker_etcd_container_folder: opt/singnet/${CIRCLE_PROJECT_REPONAME}/${SERVICE_FOLDER}/etcd/

  deploy-places365-scene-recognition:
    docker:
      - image: circleci/python:3.6.6-node
    working_directory: ~/singnet
    environment:
      SERVICE_NAME: places365-scene-recognition
      SERVICE_FOLDER: Services/gRPC/places365-scene-recognition
      SERVICE_RUN_COMMAND: bash -c "git pull;python3 run_scene_recognition_service.py"
      SERVICE_TEST_COMMAND: python3 test_scene_recognition_service.py auto
      SNETD_PORT_KOVAN: 7019
      SNETD_PORT_ROPSTEN: 7069
    steps:
      - bnd_cmd:
          docker_image_name: places365_scene_recognition
          docker_container_name: RAMON_PLACES365_SCENE_RECON
          docker_etcd_host_folder: singnet/etcd/${SERVICE_NAME}/
          docker_etcd_container_folder: opt/singnet/${CIRCLE_PROJECT_REPONAME}/${SERVICE_FOLDER}/etcd/

workflows:
  version: 2.1
  wf-cntk-image-recon:
    jobs:
      - deploy-cntk-image-recon

  wf-i3d-video-action-recognition:
    jobs:
      - deploy-i3d-video-action-recognition

#  wf-places365-scene-recognition:
#    jobs:
#      - deploy-places365-scene-recognition

  wf-s2vt-video-captioning:
    jobs:
      - deploy-s2vt-video-captioning

  wf-yolov3-object-detection:
    jobs:
      - deploy-yolov3-object-detection

  wf-zeta36-chess-alpha-zero:
    jobs:
      - deploy-zeta36-chess-alpha-zero